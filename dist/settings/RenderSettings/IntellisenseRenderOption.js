/**
 * The recongized render setting options
 */
export var IntellisenseRenderOption;
(function (IntellisenseRenderOption) {
    IntellisenseRenderOption[IntellisenseRenderOption["Off"] = 0] = "Off";
    IntellisenseRenderOption[IntellisenseRenderOption["RenderDescriptionParameterReturn"] = 1] = "RenderDescriptionParameterReturn";
    IntellisenseRenderOption[IntellisenseRenderOption["RenderDescriptionParameterList"] = 2] = "RenderDescriptionParameterList";
    IntellisenseRenderOption[IntellisenseRenderOption["RenderDescriptionReturn"] = 3] = "RenderDescriptionReturn";
    IntellisenseRenderOption[IntellisenseRenderOption["RenderDescriptionOnly"] = 4] = "RenderDescriptionOnly";
})(IntellisenseRenderOption || (IntellisenseRenderOption = {}));
/**
 *
 * @param value The intellisense render setting
 * @returns True if the Return Intellisense should render, otherwise false
 */
export function shouldRenderReturns(render_setting) {
    // Render override
    if (isBoolean(render_setting))
        return render_setting;
    return [
        IntellisenseRenderOption.RenderDescriptionParameterReturn,
        IntellisenseRenderOption.RenderDescriptionReturn
    ].includes(render_setting);
}
/**
 *
 * @param value The intellisense render setting
 * @returns True if the Parameters Intellisense should render, otherwise false
 */
export function shouldRenderParameters(render_setting) {
    // Render override
    if (isBoolean(render_setting))
        return render_setting;
    return [
        IntellisenseRenderOption.RenderDescriptionParameterReturn,
        IntellisenseRenderOption.RenderDescriptionParameterList
    ].includes(render_setting);
}
/**
 *
 * @param value The intellisense render setting
 * @returns True if the Description Intellisense should render, otherwise false
 */
export function shouldRenderDescription(render_setting) {
    // Render override
    if (isBoolean(render_setting))
        return render_setting;
    return render_setting != IntellisenseRenderOption.Off;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSW50ZWxsaXNlbnNlUmVuZGVyT3B0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3NldHRpbmdzL1JlbmRlclNldHRpbmdzL0ludGVsbGlzZW5zZVJlbmRlck9wdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7R0FFRztBQUNILE1BQU0sQ0FBTixJQUFZLHdCQU1YO0FBTkQsV0FBWSx3QkFBd0I7SUFDaEMscUVBQU8sQ0FBQTtJQUNQLCtIQUFvQyxDQUFBO0lBQ3BDLDJIQUFrQyxDQUFBO0lBQ2xDLDZHQUEyQixDQUFBO0lBQzNCLHlHQUF5QixDQUFBO0FBQzdCLENBQUMsRUFOVyx3QkFBd0IsS0FBeEIsd0JBQXdCLFFBTW5DO0FBRUQ7Ozs7R0FJRztBQUNILE1BQU0sVUFBVSxtQkFBbUIsQ0FBQyxjQUFrRDtJQUNsRixrQkFBa0I7SUFDbEIsSUFBSSxTQUFTLENBQUMsY0FBYyxDQUFDO1FBQUUsT0FBTyxjQUFjLENBQUE7SUFFcEQsT0FBTztRQUNILHdCQUF3QixDQUFDLGdDQUFnQztRQUN6RCx3QkFBd0IsQ0FBQyx1QkFBdUI7S0FDbkQsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUE7QUFDOUIsQ0FBQztBQUVEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsc0JBQXNCLENBQUMsY0FBd0M7SUFDM0Usa0JBQWtCO0lBQ2xCLElBQUksU0FBUyxDQUFDLGNBQWMsQ0FBQztRQUFFLE9BQU8sY0FBYyxDQUFBO0lBRXBELE9BQU87UUFDSCx3QkFBd0IsQ0FBQyxnQ0FBZ0M7UUFDekQsd0JBQXdCLENBQUMsOEJBQThCO0tBQzFELENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQy9CLENBQUM7QUFFRDs7OztHQUlHO0FBQ0gsTUFBTSxVQUFVLHVCQUF1QixDQUFDLGNBQXdDO0lBQzVFLGtCQUFrQjtJQUNsQixJQUFJLFNBQVMsQ0FBQyxjQUFjLENBQUM7UUFBRSxPQUFPLGNBQWMsQ0FBQTtJQUVwRCxPQUFPLGNBQWMsSUFBSSx3QkFBd0IsQ0FBQyxHQUFHLENBQUE7QUFDekQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBUaGUgcmVjb25naXplZCByZW5kZXIgc2V0dGluZyBvcHRpb25zXHJcbiAqL1xyXG5leHBvcnQgZW51bSBJbnRlbGxpc2Vuc2VSZW5kZXJPcHRpb24ge1xyXG4gICAgT2ZmID0gMCxcclxuICAgIFJlbmRlckRlc2NyaXB0aW9uUGFyYW1ldGVyUmV0dXJuID0gMSxcclxuICAgIFJlbmRlckRlc2NyaXB0aW9uUGFyYW1ldGVyTGlzdCA9IDIsXHJcbiAgICBSZW5kZXJEZXNjcmlwdGlvblJldHVybiA9IDMsXHJcbiAgICBSZW5kZXJEZXNjcmlwdGlvbk9ubHkgPSA0XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBcclxuICogQHBhcmFtIHZhbHVlIFRoZSBpbnRlbGxpc2Vuc2UgcmVuZGVyIHNldHRpbmdcclxuICogQHJldHVybnMgVHJ1ZSBpZiB0aGUgUmV0dXJuIEludGVsbGlzZW5zZSBzaG91bGQgcmVuZGVyLCBvdGhlcndpc2UgZmFsc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRSZW5kZXJSZXR1cm5zKHJlbmRlcl9zZXR0aW5nOiBJbnRlbGxpc2Vuc2VSZW5kZXJPcHRpb24gfCBib29sZWFuKSA6IGJvb2xlYW4ge1xyXG4gICAgLy8gUmVuZGVyIG92ZXJyaWRlXHJcbiAgICBpZiAoaXNCb29sZWFuKHJlbmRlcl9zZXR0aW5nKSkgcmV0dXJuIHJlbmRlcl9zZXR0aW5nXHJcblxyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICBJbnRlbGxpc2Vuc2VSZW5kZXJPcHRpb24uUmVuZGVyRGVzY3JpcHRpb25QYXJhbWV0ZXJSZXR1cm4sXHJcbiAgICAgICAgSW50ZWxsaXNlbnNlUmVuZGVyT3B0aW9uLlJlbmRlckRlc2NyaXB0aW9uUmV0dXJuXHJcbiAgICBdLmluY2x1ZGVzKHJlbmRlcl9zZXR0aW5nKVxyXG59XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgaW50ZWxsaXNlbnNlIHJlbmRlciBzZXR0aW5nXHJcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIFBhcmFtZXRlcnMgSW50ZWxsaXNlbnNlIHNob3VsZCByZW5kZXIsIG90aGVyd2lzZSBmYWxzZVxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZFJlbmRlclBhcmFtZXRlcnMocmVuZGVyX3NldHRpbmc6IEludGVsbGlzZW5zZVJlbmRlck9wdGlvbikgOiBib29sZWFuIHtcclxuICAgIC8vIFJlbmRlciBvdmVycmlkZVxyXG4gICAgaWYgKGlzQm9vbGVhbihyZW5kZXJfc2V0dGluZykpIHJldHVybiByZW5kZXJfc2V0dGluZ1xyXG5cclxuICAgIHJldHVybiBbXHJcbiAgICAgICAgSW50ZWxsaXNlbnNlUmVuZGVyT3B0aW9uLlJlbmRlckRlc2NyaXB0aW9uUGFyYW1ldGVyUmV0dXJuLFxyXG4gICAgICAgIEludGVsbGlzZW5zZVJlbmRlck9wdGlvbi5SZW5kZXJEZXNjcmlwdGlvblBhcmFtZXRlckxpc3RcclxuICAgIF0uaW5jbHVkZXMocmVuZGVyX3NldHRpbmcpO1xyXG59XHJcblxyXG4vKipcclxuICogXHJcbiAqIEBwYXJhbSB2YWx1ZSBUaGUgaW50ZWxsaXNlbnNlIHJlbmRlciBzZXR0aW5nXHJcbiAqIEByZXR1cm5zIFRydWUgaWYgdGhlIERlc2NyaXB0aW9uIEludGVsbGlzZW5zZSBzaG91bGQgcmVuZGVyLCBvdGhlcndpc2UgZmFsc2VcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBzaG91bGRSZW5kZXJEZXNjcmlwdGlvbihyZW5kZXJfc2V0dGluZzogSW50ZWxsaXNlbnNlUmVuZGVyT3B0aW9uKSA6IGJvb2xlYW4ge1xyXG4gICAgLy8gUmVuZGVyIG92ZXJyaWRlXHJcbiAgICBpZiAoaXNCb29sZWFuKHJlbmRlcl9zZXR0aW5nKSkgcmV0dXJuIHJlbmRlcl9zZXR0aW5nXHJcblxyXG4gICAgcmV0dXJuIHJlbmRlcl9zZXR0aW5nICE9IEludGVsbGlzZW5zZVJlbmRlck9wdGlvbi5PZmZcclxufVxyXG4iXX0=